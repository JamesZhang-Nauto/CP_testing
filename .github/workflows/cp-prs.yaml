name: Cherry Pick PRs

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  cherry_pick:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_PERMISSION }}

      - name: Get list of target branches from labels
        id: get_branches
        shell: bash
        run: |
          # Ensure jq is installed
          sudo apt-get update -qq
          sudo apt-get install -y jq

          # Get labels from the PR
          labels=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH")
          echo "Labels on the PR: $labels"

          # Initialize an empty array for target branches
          TARGET_BRANCHES=()

          for label in $labels; do
            echo "Checking label: $label"
            case "$label" in
              "master")
                TARGET_BRANCHES+=("master")
                ;;
              *-release)
                TARGET_BRANCHES+=("$label")
                ;;
            esac
          done

          if [ ${#TARGET_BRANCHES[@]} -eq 0 ]; then
            echo "No valid branch labels (master or *-release) found. Exiting."
            exit 0  # Exit gracefully if no valid labels are found
          fi

          # Export the branches as an environment variable
          echo "TARGET_BRANCHES=${TARGET_BRANCHES[*]}" >> $GITHUB_ENV

      - name: Cherry-pick into target branches
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_PERMISSION }}
          TARGET_BRANCHES: ${{ env.TARGET_BRANCHES }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git remote set-url origin https://${{ secrets.BOT_PERMISSION }}@github.com/${{ github.repository }}

          # Get the merge commit SHA of the merged PR
          MERGE_COMMIT_SHA=$(jq -r '.pull_request.merge_commit_sha' "$GITHUB_EVENT_PATH")

          if [ -z "$MERGE_COMMIT_SHA" ] || [ "$MERGE_COMMIT_SHA" == "null" ]; then
            echo "Merge commit SHA not found. Exiting."
            exit 1
          fi

          echo "Merge commit SHA: $MERGE_COMMIT_SHA"

          # Convert TARGET_BRANCHES to an array
          IFS=' ' read -r -a BRANCHES <<< "$TARGET_BRANCHES"

          for TARGET_BRANCH in "${BRANCHES[@]}"; do
            echo "Processing branch: $TARGET_BRANCH"

            # Fetch and checkout the target branch
            git fetch origin $TARGET_BRANCH
            git checkout $TARGET_BRANCH

            # Create a new branch for the cherry-pick
            NEW_BRANCH="cherry-pick/$TARGET_BRANCH/pr-${{ github.event.pull_request.number }}"
            git checkout -b "$NEW_BRANCH"

            # Perform the cherry-pick
            if git cherry-pick -x "$MERGE_COMMIT_SHA"; then
              echo "Cherry-pick succeeded on branch $TARGET_BRANCH"
            else
              echo "Cherry-pick failed on branch $TARGET_BRANCH. Aborting cherry-pick and moving to the next branch."
              git cherry-pick --abort
              continue
            fi

            # Push the new branch
            git push origin "$NEW_BRANCH"

            # Create a pull request using the GitHub CLI
            PR_TITLE="${{ github.event.pull_request.title }} [CP to $TARGET_BRANCH]"
            PR_BODY="Cherry pick of PR #${{ github.event.pull_request.number }} into \`$TARGET_BRANCH\`"

            # Install GitHub CLI
            sudo apt-get install -y gh

            # Authenticate GitHub CLI
            echo "${{ secrets.BOT_PERMISSION }}" | gh auth login --with-token

            # Create the pull request
            gh pr create \
              --repo "${{ github.repository }}" \
              --head "$NEW_BRANCH" \
              --base "$TARGET_BRANCH" \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --label "CP" \
              --reviewer "${{ github.event.pull_request.user.login }}" \
              --assignee "${{ github.event.pull_request.user.login }}"

          done
